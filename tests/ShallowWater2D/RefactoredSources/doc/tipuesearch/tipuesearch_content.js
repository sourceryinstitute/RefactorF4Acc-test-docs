var tipuesearch = {"pages":[{"text":"Refactored Shallow Water Simulator Brief description This refactored code demonstrates the capabilities of the Fortran refactoring tool RefactorF4Acc . Compilers This archive has been tested with the GNU Fortran compiler versions 7 and later. Developer Info J. Kaempf (refactored by RefactoredF4Acc)","tags":"home","loc":"index.html","title":" Refactored Shallow Water Simulator "},{"text":"This file depends on sourcefile~~main.f95~~EfferentGraph sourcefile~main.f95 main.f95 sourcefile~update.f95 update.f95 sourcefile~main.f95->sourcefile~update.f95 sourcefile~sub.f95 sub.f95 sourcefile~main.f95->sourcefile~sub.f95 sourcefile~shapiro.f95 shapiro.f95 sourcefile~sub.f95->sourcefile~shapiro.f95 sourcefile~dyn.f95 dyn.f95 sourcefile~sub.f95->sourcefile~dyn.f95 sourcefile~init.f95 init.f95 sourcefile~sub.f95->sourcefile~init.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs wave2d Source Code main.f95 Source Code program wave2d use module_update !*****************************************! !* 2d shallow-water model                *! !*                                       *! !* including:                            *! !* - horizontal pressure-gradient force  *! !* - shapiro filter                      *! !* - flooding algorithm                  *! !*                                       *! !* author: j. kaempf, 2008               *! !*****************************************! use sub ! local parameters integer , parameter :: nx = 500 integer , parameter :: ny = 500 real :: dt real :: dx real :: dy real :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: etan real :: g real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: h real :: hmin real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: hzero integer :: j integer :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: vn integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: wet real :: hmax real :: time real :: dtmax real :: c real :: lambda integer :: n integer :: ntot integer :: nout ! set local parameters ! runtime parameters ntot = 10000 ! set epsilon for Shapiro filter eps = 0.05 call init ( hmin , dx , dy , dt , g , j , k , hzero , eta , etan , h , wet , u , un , v , vn ) !********** !debug open ( 90 , file = 'debug.dat' , form = 'formatted' ) ! output of initial eta distribution open ( 10 , file = 'eta0.dat' , form = 'formatted' ) do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) end do close ( 10 ) ! output of initial layer thickness distribution open ( 10 , file = 'h0.dat' , form = 'formatted' ) do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( hzero ( j , k ), k = 0 , nx + 1 ) end do close ( 10 ) ! determine maximum water depth hmax = 0. do j = 1 , ny do k = 1 , nx hmax = max ( hmax , h ( j , k )) end do end do ! maximum phase speed c = sqrt ( 2 * g * hmax ) ! write ( 6 , * ) \"c = \" , c ! determine stability parameter lambda = dt * sqrt ( g * hmax ) / min ( dx , dy ) write ( 6 , * ) \"lambda = \" , lambda if ( lambda > 1 ) then write ( 6 , * ) \"This will not work. Do you know why?\" stop end if ! open files for output open ( 10 , file = 'eta.dat' , form = 'formatted' ) open ( 20 , file = 'h.dat' , form = 'formatted' ) open ( 30 , file = 'u.dat' , form = 'formatted' ) open ( 40 , file = 'v.dat' , form = 'formatted' ) do j = 26 , 26 do k = 26 , 26 eta ( j , k ) = 1.0 end do end do !--------------------------- ! simulation loop !--------------------------- do n = 1 , ntot time = real ( n ) * dt ! call predictor call dyn ( j , k , eta , dt , dx , g , dy , un , u , wet , v , vn , h , etan ) ! updating including Shapiro filter call shapiro ( j , k , wet , etan , eps , eta ) call update ( dt , dx , dy , eps , eta , etan , g , h , hmin , hzero , j , k , u , un , v , vn , wet ) end do !write results only once at the end.... do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) write ( 20 , '(101F12.6)' )( h ( j , k ) , k = 0 , nx + 1 ) write ( 30 , '(101F12.6)' )( u ( j , k ) , k = 0 , nx + 1 ) write ( 40 , '(101F12.6)' )( v ( j , k ) , k = 0 , nx + 1 ) end do write ( 6 , * ) \"Data output at time = \" , time / 6 0.0 , \" min\" end program wave2d","tags":"","loc":"sourcefile/main.f95.html","title":"main.f95 – Refactored Shallow Water Simulator"},{"text":"Files dependent on this one sourcefile~~shapiro.f95~~AfferentGraph sourcefile~shapiro.f95 shapiro.f95 sourcefile~sub.f95 sub.f95 sourcefile~sub.f95->sourcefile~shapiro.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules module_shapiro Source Code shapiro.f95 Source Code module module_shapiro contains subroutine shapiro ( j , k , wet , etan , eps , eta ) integer , parameter :: ny = 500 integer , parameter :: nx = 500 !local parameters integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: etan real , intent ( In ) :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: eta real :: term1 real :: term2 real :: term3 ! 1-order Shapiro filter do j = 1 , ny do k = 1 , nx if ( wet ( j , k ) == 1 ) then term1 = ( 1.0 - 0.25 * eps * ( wet ( j , k + 1 ) + wet ( j , k - 1 ) + wet ( j + 1 , k ) + wet ( j - 1 , k ))) * etan ( j , k ) term2 = 0.25 * eps * ( wet ( j , k + 1 ) * etan ( j , k + 1 ) + wet ( j , k - 1 ) * etan ( j , k - 1 )) term3 = 0.25 * eps * ( wet ( j + 1 , k ) * etan ( j + 1 , k ) + wet ( j - 1 , k ) * etan ( j - 1 , k )) eta ( j , k ) = term1 + term2 + term3 else eta ( j , k ) = etan ( j , k ) end if end do end do end subroutine shapiro end module module_shapiro","tags":"","loc":"sourcefile/shapiro.f95.html","title":"shapiro.f95 – Refactored Shallow Water Simulator"},{"text":"Contents Modules param Source Code param.f95 Source Code module param integer , parameter :: nx = 500 integer , parameter :: ny = 500 real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: hzero real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: h real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: etan real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: vn real :: dt real :: dx real :: dy real :: g real :: eps integer :: j integer :: k integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: wet real :: hmin end module param","tags":"","loc":"sourcefile/param.f95.html","title":"param.f95 – Refactored Shallow Water Simulator"},{"text":"Files dependent on this one sourcefile~~dyn.f95~~AfferentGraph sourcefile~dyn.f95 dyn.f95 sourcefile~sub.f95 sub.f95 sourcefile~sub.f95->sourcefile~dyn.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules module_dyn Source Code dyn.f95 Source Code module module_dyn contains subroutine dyn ( j , k , eta , dt , dx , g , dy , un , u , wet , v , vn , h , etan ) integer , parameter :: nx = 500 integer , parameter :: ny = 500 ! local parameters integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: eta real , intent ( In ) :: dt real , intent ( In ) :: dx real , intent ( In ) :: g real , intent ( In ) :: dy real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: u integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: vn real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: h real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: etan real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: du real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: dv real :: uu real :: vv real :: duu real :: dvv real :: hue real :: huw real :: hwp real :: hwn real :: hen real :: hep real :: hvn real :: hvs real :: hsp real :: hsn real :: hnn real :: hnp do j = 1 , ny do k = 1 , nx du ( j , k ) = - dt * g * ( eta ( j , k + 1 ) - eta ( j , k )) / dx dv ( j , k ) = - dt * g * ( eta ( j + 1 , k ) - eta ( j , k )) / dy end do end do do j = 1 , ny do k = 1 , nx ! prediction for u un ( j , k ) = 0.0 uu = u ( j , k ) duu = du ( j , k ) if ( wet ( j , k ) == 1 ) then if (( wet ( j , k + 1 ) == 1 ). or .( duu > 0.0 )) un ( j , k ) = uu + duu else if (( wet ( j , k + 1 ) == 1 ). and .( duu < 0.0 )) un ( j , k ) = uu + duu end if ! prediction for v vv = v ( j , k ) dvv = dv ( j , k ) vn ( j , k ) = 0.0 if ( wet ( j , k ) == 1 ) then if (( wet ( j + 1 , k ) == 1 ). or .( dvv > 0.0 )) vn ( j , k ) = vv + dvv else if (( wet ( j + 1 , k ) == 1 ). and .( dvv < 0.0 )) vn ( j , k ) = vv + dvv end if end do end do ! sea level predictor do j = 1 , ny do k = 1 , nx hep = 0.5 * ( un ( j , k ) + abs ( un ( j , k ))) * h ( j , k ) hen = 0.5 * ( un ( j , k ) - abs ( un ( j , k ))) * h ( j , k + 1 ) hue = hep + hen hwp = 0.5 * ( un ( j , k - 1 ) + abs ( un ( j , k - 1 ))) * h ( j , k - 1 ) hwn = 0.5 * ( un ( j , k - 1 ) - abs ( un ( j , k - 1 ))) * h ( j , k ) huw = hwp + hwn hnp = 0.5 * ( vn ( j , k ) + abs ( vn ( j , k ))) * h ( j , k ) hnn = 0.5 * ( vn ( j , k ) - abs ( vn ( j , k ))) * h ( j + 1 , k ) hvn = hnp + hnn hsp = 0.5 * ( vn ( j - 1 , k ) + abs ( vn ( j - 1 , k ))) * h ( j - 1 , k ) hsn = 0.5 * ( vn ( j - 1 , k ) - abs ( vn ( j - 1 , k ))) * h ( j , k ) hvs = hsp + hsn etan ( j , k ) = eta ( j , k ) - dt * ( hue - huw ) / dx - dt * ( hvn - hvs ) / dy end do end do end subroutine dyn end module module_dyn","tags":"","loc":"sourcefile/dyn.f95.html","title":"dyn.f95 – Refactored Shallow Water Simulator"},{"text":"This file depends on sourcefile~~sub.f95~~EfferentGraph sourcefile~sub.f95 sub.f95 sourcefile~shapiro.f95 shapiro.f95 sourcefile~sub.f95->sourcefile~shapiro.f95 sourcefile~dyn.f95 dyn.f95 sourcefile~sub.f95->sourcefile~dyn.f95 sourcefile~init.f95 init.f95 sourcefile~sub.f95->sourcefile~init.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~sub.f95~~AfferentGraph sourcefile~sub.f95 sub.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules sub Source Code sub.f95 Source Code module sub use module_init use module_dyn use module_shapiro interface init module procedure init end interface init interface dyn module procedure dyn end interface dyn interface shapiro module procedure shapiro end interface shapiro end module sub","tags":"","loc":"sourcefile/sub.f95.html","title":"sub.f95 – Refactored Shallow Water Simulator"},{"text":"Files dependent on this one sourcefile~~update.f95~~AfferentGraph sourcefile~update.f95 update.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~update.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules module_update Source Code update.f95 Source Code module module_update contains subroutine update ( dt , dx , dy , eps , eta , etan , g , h , hmin , hzero , j , k , u , un , v , vn , wet ) ! === Original code from wave2d starts here === ! === Original code from wave2d starts here === integer , parameter :: nx = 500 integer , parameter :: ny = 500 real :: dt real :: dx real :: dy real :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: etan real :: g real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: h real , intent ( In ) :: hmin real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: hzero real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: vn integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: wet integer , intent ( InOut ) :: k integer , intent ( InOut ) :: j do j = 0 , ny + 1 do k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = un ( j , k ) v ( j , k ) = vn ( j , k ) end do end do end subroutine update end module module_update","tags":"","loc":"sourcefile/update.f95.html","title":"update.f95 – Refactored Shallow Water Simulator"},{"text":"Files dependent on this one sourcefile~~init.f95~~AfferentGraph sourcefile~init.f95 init.f95 sourcefile~sub.f95 sub.f95 sourcefile~sub.f95->sourcefile~init.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules module_init Source Code init.f95 Source Code module module_init contains subroutine init ( hmin , dx , dy , dt , g , j , k , hzero , eta , etan , h , wet , u , un , v , vn ) integer , parameter :: ny = 500 integer , parameter :: nx = 500 real , intent ( InOut ) :: hmin real , intent ( Out ) :: dx real , intent ( Out ) :: dy real , intent ( Out ) :: dt real , intent ( Out ) :: g integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: hzero real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: etan real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: h integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: vn hmin = 0.05 ! grid parameters dx = 1 0.0 dy = 1 0.0 dt = 0.1 ! physical parameters g = 9.81 ! initial conditions do j = 0 , ny + 1 do k = 0 , nx + 1 hzero ( j , k ) = 1 0.0 end do end do ! land boundaries with 10 m elevation do k = 0 , nx + 1 hzero ( 0 , k ) = - 1 0.0 ! hzero(1,k) = -0.0 hzero ( ny + 1 , k ) = - 1 0.0 ! hzero(ny,k) = -0.0 end do do j = 0 , ny + 1 hzero ( j , 0 ) = - 1 0.0 hzero ( j , nx + 1 ) = - 1 0.0 end do do j = 0 , ny + 1 do k = 0 , nx + 1 eta ( j , k ) = - min ( 0.0 , hzero ( j , k )) etan ( j , k ) = eta ( j , k ) end do end do !xxxxxxxxxxxxxxxxxxx do j = 0 , ny + 1 do k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) ! wet = 1 defines \"wet\" grid cells ! wet = 0 defines \"dry\" grid cells wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = 0. un ( j , k ) = 0. v ( j , k ) = 0. vn ( j , k ) = 0. end do end do end subroutine init end module module_init","tags":"","loc":"sourcefile/init.f95.html","title":"init.f95 – Refactored Shallow Water Simulator"},{"text":"public subroutine shapiro(j, k, wet, etan, eps, eta) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: etan real, intent(in) :: eps real, intent(out), dimension(0:ny+1,0:nx+1) :: eta Called by proc~~shapiro~~CalledByGraph proc~shapiro shapiro interface~shapiro shapiro interface~shapiro->proc~shapiro program~wave2d wave2d program~wave2d->interface~shapiro Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code shapiro Source Code subroutine shapiro ( j , k , wet , etan , eps , eta ) integer , parameter :: ny = 500 integer , parameter :: nx = 500 !local parameters integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: etan real , intent ( In ) :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: eta real :: term1 real :: term2 real :: term3 ! 1-order Shapiro filter do j = 1 , ny do k = 1 , nx if ( wet ( j , k ) == 1 ) then term1 = ( 1.0 - 0.25 * eps * ( wet ( j , k + 1 ) + wet ( j , k - 1 ) + wet ( j + 1 , k ) + wet ( j - 1 , k ))) * etan ( j , k ) term2 = 0.25 * eps * ( wet ( j , k + 1 ) * etan ( j , k + 1 ) + wet ( j , k - 1 ) * etan ( j , k - 1 )) term3 = 0.25 * eps * ( wet ( j + 1 , k ) * etan ( j + 1 , k ) + wet ( j - 1 , k ) * etan ( j - 1 , k )) eta ( j , k ) = term1 + term2 + term3 else eta ( j , k ) = etan ( j , k ) end if end do end do end subroutine shapiro","tags":"","loc":"proc/shapiro.html","title":"shapiro – Refactored Shallow Water Simulator"},{"text":"public subroutine dyn(j, k, eta, dt, dx, g, dy, un, u, wet, v, vn, h, etan) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, intent(in) :: dt real, intent(in) :: dx real, intent(in) :: g real, intent(in) :: dy real, intent(inout), dimension(0:ny+1,0:nx+1) :: un real, intent(in), dimension(0:ny+1,0:nx+1) :: u integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: v real, intent(inout), dimension(0:ny+1,0:nx+1) :: vn real, intent(in), dimension(0:ny+1,0:nx+1) :: h real, intent(out), dimension(0:ny+1,0:nx+1) :: etan Called by proc~~dyn~~CalledByGraph proc~dyn dyn interface~dyn dyn interface~dyn->proc~dyn program~wave2d wave2d program~wave2d->interface~dyn Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code dyn Source Code subroutine dyn ( j , k , eta , dt , dx , g , dy , un , u , wet , v , vn , h , etan ) integer , parameter :: nx = 500 integer , parameter :: ny = 500 ! local parameters integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: eta real , intent ( In ) :: dt real , intent ( In ) :: dx real , intent ( In ) :: g real , intent ( In ) :: dy real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: u integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: vn real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: h real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: etan real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: du real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: dv real :: uu real :: vv real :: duu real :: dvv real :: hue real :: huw real :: hwp real :: hwn real :: hen real :: hep real :: hvn real :: hvs real :: hsp real :: hsn real :: hnn real :: hnp do j = 1 , ny do k = 1 , nx du ( j , k ) = - dt * g * ( eta ( j , k + 1 ) - eta ( j , k )) / dx dv ( j , k ) = - dt * g * ( eta ( j + 1 , k ) - eta ( j , k )) / dy end do end do do j = 1 , ny do k = 1 , nx ! prediction for u un ( j , k ) = 0.0 uu = u ( j , k ) duu = du ( j , k ) if ( wet ( j , k ) == 1 ) then if (( wet ( j , k + 1 ) == 1 ). or .( duu > 0.0 )) un ( j , k ) = uu + duu else if (( wet ( j , k + 1 ) == 1 ). and .( duu < 0.0 )) un ( j , k ) = uu + duu end if ! prediction for v vv = v ( j , k ) dvv = dv ( j , k ) vn ( j , k ) = 0.0 if ( wet ( j , k ) == 1 ) then if (( wet ( j + 1 , k ) == 1 ). or .( dvv > 0.0 )) vn ( j , k ) = vv + dvv else if (( wet ( j + 1 , k ) == 1 ). and .( dvv < 0.0 )) vn ( j , k ) = vv + dvv end if end do end do ! sea level predictor do j = 1 , ny do k = 1 , nx hep = 0.5 * ( un ( j , k ) + abs ( un ( j , k ))) * h ( j , k ) hen = 0.5 * ( un ( j , k ) - abs ( un ( j , k ))) * h ( j , k + 1 ) hue = hep + hen hwp = 0.5 * ( un ( j , k - 1 ) + abs ( un ( j , k - 1 ))) * h ( j , k - 1 ) hwn = 0.5 * ( un ( j , k - 1 ) - abs ( un ( j , k - 1 ))) * h ( j , k ) huw = hwp + hwn hnp = 0.5 * ( vn ( j , k ) + abs ( vn ( j , k ))) * h ( j , k ) hnn = 0.5 * ( vn ( j , k ) - abs ( vn ( j , k ))) * h ( j + 1 , k ) hvn = hnp + hnn hsp = 0.5 * ( vn ( j - 1 , k ) + abs ( vn ( j - 1 , k ))) * h ( j - 1 , k ) hsn = 0.5 * ( vn ( j - 1 , k ) - abs ( vn ( j - 1 , k ))) * h ( j , k ) hvs = hsp + hsn etan ( j , k ) = eta ( j , k ) - dt * ( hue - huw ) / dx - dt * ( hvn - hvs ) / dy end do end do end subroutine dyn","tags":"","loc":"proc/dyn.html","title":"dyn – Refactored Shallow Water Simulator"},{"text":"public interface dyn Calls interface~~dyn~~CallsGraph interface~dyn dyn proc~dyn dyn interface~dyn->proc~dyn Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~dyn~~CalledByGraph interface~dyn dyn program~wave2d wave2d program~wave2d->interface~dyn Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures dyn Module Procedures public subroutine dyn (j, k, eta, dt, dx, g, dy, un, u, wet, v, vn, h, etan) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, intent(in) :: dt real, intent(in) :: dx real, intent(in) :: g real, intent(in) :: dy real, intent(inout), dimension(0:ny+1,0:nx+1) :: un real, intent(in), dimension(0:ny+1,0:nx+1) :: u integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: v real, intent(inout), dimension(0:ny+1,0:nx+1) :: vn real, intent(in), dimension(0:ny+1,0:nx+1) :: h real, intent(out), dimension(0:ny+1,0:nx+1) :: etan","tags":"","loc":"interface/dyn.html","title":"dyn – Refactored Shallow Water Simulator"},{"text":"public interface init Calls interface~~init~~CallsGraph interface~init init proc~init init interface~init->proc~init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~init~~CalledByGraph interface~init init program~wave2d wave2d program~wave2d->interface~init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures init Module Procedures public subroutine init (hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn) Arguments Type Intent Optional Attributes Name real, intent(inout) :: hmin real, intent(out) :: dx real, intent(out) :: dy real, intent(out) :: dt real, intent(out) :: g integer, intent(inout) :: j integer, intent(inout) :: k real, intent(inout), dimension(0:ny+1,0:nx+1) :: hzero real, intent(inout), dimension(0:ny+1,0:nx+1) :: eta real, intent(out), dimension(0:ny+1,0:nx+1) :: etan real, intent(inout), dimension(0:ny+1,0:nx+1) :: h integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(out), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(out), dimension(0:ny+1,0:nx+1) :: vn","tags":"","loc":"interface/init.html","title":"init – Refactored Shallow Water Simulator"},{"text":"public interface shapiro Calls interface~~shapiro~~CallsGraph interface~shapiro shapiro proc~shapiro shapiro interface~shapiro->proc~shapiro Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called by interface~~shapiro~~CalledByGraph interface~shapiro shapiro program~wave2d wave2d program~wave2d->interface~shapiro Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Module Procedures shapiro Module Procedures public subroutine shapiro (j, k, wet, etan, eps, eta) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: etan real, intent(in) :: eps real, intent(out), dimension(0:ny+1,0:nx+1) :: eta","tags":"","loc":"interface/shapiro.html","title":"shapiro – Refactored Shallow Water Simulator"},{"text":"public subroutine update(dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet) Arguments Type Intent Optional Attributes Name real :: dt real :: dx real :: dy real :: eps real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, dimension(0:ny+1,0:nx+1) :: etan real :: g real, intent(inout), dimension(0:ny+1,0:nx+1) :: h real, intent(in) :: hmin real, intent(in), dimension(0:ny+1,0:nx+1) :: hzero integer, intent(inout) :: j integer, intent(inout) :: k real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(in), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(in), dimension(0:ny+1,0:nx+1) :: vn integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet Called by proc~~update~~CalledByGraph proc~update update program~wave2d wave2d program~wave2d->proc~update Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code update Source Code subroutine update ( dt , dx , dy , eps , eta , etan , g , h , hmin , hzero , j , k , u , un , v , vn , wet ) ! === Original code from wave2d starts here === ! === Original code from wave2d starts here === integer , parameter :: nx = 500 integer , parameter :: ny = 500 real :: dt real :: dx real :: dy real :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: etan real :: g real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: h real , intent ( In ) :: hmin real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: hzero real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( In ) :: vn integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: wet integer , intent ( InOut ) :: k integer , intent ( InOut ) :: j do j = 0 , ny + 1 do k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = un ( j , k ) v ( j , k ) = vn ( j , k ) end do end do end subroutine update","tags":"","loc":"proc/update.html","title":"update – Refactored Shallow Water Simulator"},{"text":"public subroutine init(hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn) Arguments Type Intent Optional Attributes Name real, intent(inout) :: hmin real, intent(out) :: dx real, intent(out) :: dy real, intent(out) :: dt real, intent(out) :: g integer, intent(inout) :: j integer, intent(inout) :: k real, intent(inout), dimension(0:ny+1,0:nx+1) :: hzero real, intent(inout), dimension(0:ny+1,0:nx+1) :: eta real, intent(out), dimension(0:ny+1,0:nx+1) :: etan real, intent(inout), dimension(0:ny+1,0:nx+1) :: h integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(out), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(out), dimension(0:ny+1,0:nx+1) :: vn Called by proc~~init~~CalledByGraph proc~init init interface~init init interface~init->proc~init program~wave2d wave2d program~wave2d->interface~init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code init Source Code subroutine init ( hmin , dx , dy , dt , g , j , k , hzero , eta , etan , h , wet , u , un , v , vn ) integer , parameter :: ny = 500 integer , parameter :: nx = 500 real , intent ( InOut ) :: hmin real , intent ( Out ) :: dx real , intent ( Out ) :: dy real , intent ( Out ) :: dt real , intent ( Out ) :: g integer , intent ( InOut ) :: j integer , intent ( InOut ) :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: hzero real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: etan real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( InOut ) :: h integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: wet real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ), intent ( Out ) :: vn hmin = 0.05 ! grid parameters dx = 1 0.0 dy = 1 0.0 dt = 0.1 ! physical parameters g = 9.81 ! initial conditions do j = 0 , ny + 1 do k = 0 , nx + 1 hzero ( j , k ) = 1 0.0 end do end do ! land boundaries with 10 m elevation do k = 0 , nx + 1 hzero ( 0 , k ) = - 1 0.0 ! hzero(1,k) = -0.0 hzero ( ny + 1 , k ) = - 1 0.0 ! hzero(ny,k) = -0.0 end do do j = 0 , ny + 1 hzero ( j , 0 ) = - 1 0.0 hzero ( j , nx + 1 ) = - 1 0.0 end do do j = 0 , ny + 1 do k = 0 , nx + 1 eta ( j , k ) = - min ( 0.0 , hzero ( j , k )) etan ( j , k ) = eta ( j , k ) end do end do !xxxxxxxxxxxxxxxxxxx do j = 0 , ny + 1 do k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) ! wet = 1 defines \"wet\" grid cells ! wet = 0 defines \"dry\" grid cells wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = 0. un ( j , k ) = 0. v ( j , k ) = 0. vn ( j , k ) = 0. end do end do end subroutine init","tags":"","loc":"proc/init.html","title":"init – Refactored Shallow Water Simulator"},{"text":"Used by module~~module_shapiro~~UsedByGraph module~module_shapiro module_shapiro module~sub sub module~sub->module~module_shapiro program~wave2d wave2d program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines shapiro Subroutines public subroutine shapiro (j, k, wet, etan, eps, eta) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: etan real, intent(in) :: eps real, intent(out), dimension(0:ny+1,0:nx+1) :: eta","tags":"","loc":"module/module_shapiro.html","title":"module_shapiro – Refactored Shallow Water Simulator"},{"text":"Contents Variables dt dx dy eps eta etan g h hmin hzero j k nx ny u un v vn wet Variables Type Visibility Attributes Name Initial real, public :: dt real, public :: dx real, public :: dy real, public :: eps real, public, dimension(0:ny+1,0:nx+1) :: eta real, public, dimension(0:ny+1,0:nx+1) :: etan real, public :: g real, public, dimension(0:ny+1,0:nx+1) :: h real, public :: hmin real, public, dimension(0:ny+1,0:nx+1) :: hzero integer, public :: j integer, public :: k integer, public, parameter :: nx = 500 integer, public, parameter :: ny = 500 real, public, dimension(0:ny+1,0:nx+1) :: u real, public, dimension(0:ny+1,0:nx+1) :: un real, public, dimension(0:ny+1,0:nx+1) :: v real, public, dimension(0:ny+1,0:nx+1) :: vn integer, public, dimension(0:ny+1,0:nx+1) :: wet","tags":"","loc":"module/param.html","title":"param – Refactored Shallow Water Simulator"},{"text":"Used by module~~module_dyn~~UsedByGraph module~module_dyn module_dyn module~sub sub module~sub->module~module_dyn program~wave2d wave2d program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines dyn Subroutines public subroutine dyn (j, k, eta, dt, dx, g, dy, un, u, wet, v, vn, h, etan) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, intent(in) :: dt real, intent(in) :: dx real, intent(in) :: g real, intent(in) :: dy real, intent(inout), dimension(0:ny+1,0:nx+1) :: un real, intent(in), dimension(0:ny+1,0:nx+1) :: u integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: v real, intent(inout), dimension(0:ny+1,0:nx+1) :: vn real, intent(in), dimension(0:ny+1,0:nx+1) :: h real, intent(out), dimension(0:ny+1,0:nx+1) :: etan","tags":"","loc":"module/module_dyn.html","title":"module_dyn – Refactored Shallow Water Simulator"},{"text":"Uses module_init module_dyn module_shapiro module~~sub~~UsesGraph module~sub sub module~module_dyn module_dyn module~sub->module~module_dyn module~module_shapiro module_shapiro module~sub->module~module_shapiro module~module_init module_init module~sub->module~module_init Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~sub~~UsedByGraph module~sub sub program~wave2d wave2d program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Interfaces dyn init shapiro Interfaces public interface dyn public subroutine dyn (j, k, eta, dt, dx, g, dy, un, u, wet, v, vn, h, etan) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, intent(in) :: dt real, intent(in) :: dx real, intent(in) :: g real, intent(in) :: dy real, intent(inout), dimension(0:ny+1,0:nx+1) :: un real, intent(in), dimension(0:ny+1,0:nx+1) :: u integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: v real, intent(inout), dimension(0:ny+1,0:nx+1) :: vn real, intent(in), dimension(0:ny+1,0:nx+1) :: h real, intent(out), dimension(0:ny+1,0:nx+1) :: etan public interface init public subroutine init (hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn) Arguments Type Intent Optional Attributes Name real, intent(inout) :: hmin real, intent(out) :: dx real, intent(out) :: dy real, intent(out) :: dt real, intent(out) :: g integer, intent(inout) :: j integer, intent(inout) :: k real, intent(inout), dimension(0:ny+1,0:nx+1) :: hzero real, intent(inout), dimension(0:ny+1,0:nx+1) :: eta real, intent(out), dimension(0:ny+1,0:nx+1) :: etan real, intent(inout), dimension(0:ny+1,0:nx+1) :: h integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(out), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(out), dimension(0:ny+1,0:nx+1) :: vn public interface shapiro public subroutine shapiro (j, k, wet, etan, eps, eta) Arguments Type Intent Optional Attributes Name integer, intent(inout) :: j integer, intent(inout) :: k integer, intent(in), dimension(0:ny+1,0:nx+1) :: wet real, intent(in), dimension(0:ny+1,0:nx+1) :: etan real, intent(in) :: eps real, intent(out), dimension(0:ny+1,0:nx+1) :: eta","tags":"","loc":"module/sub.html","title":"sub – Refactored Shallow Water Simulator"},{"text":"Used by module~~module_update~~UsedByGraph module~module_update module_update program~wave2d wave2d program~wave2d->module~module_update Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines update Subroutines public subroutine update (dt, dx, dy, eps, eta, etan, g, h, hmin, hzero, j, k, u, un, v, vn, wet) Arguments Type Intent Optional Attributes Name real :: dt real :: dx real :: dy real :: eps real, intent(in), dimension(0:ny+1,0:nx+1) :: eta real, dimension(0:ny+1,0:nx+1) :: etan real :: g real, intent(inout), dimension(0:ny+1,0:nx+1) :: h real, intent(in) :: hmin real, intent(in), dimension(0:ny+1,0:nx+1) :: hzero integer, intent(inout) :: j integer, intent(inout) :: k real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(in), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(in), dimension(0:ny+1,0:nx+1) :: vn integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet","tags":"","loc":"module/module_update.html","title":"module_update – Refactored Shallow Water Simulator"},{"text":"Used by module~~module_init~~UsedByGraph module~module_init module_init module~sub sub module~sub->module~module_init program~wave2d wave2d program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines init Subroutines public subroutine init (hmin, dx, dy, dt, g, j, k, hzero, eta, etan, h, wet, u, un, v, vn) Arguments Type Intent Optional Attributes Name real, intent(inout) :: hmin real, intent(out) :: dx real, intent(out) :: dy real, intent(out) :: dt real, intent(out) :: g integer, intent(inout) :: j integer, intent(inout) :: k real, intent(inout), dimension(0:ny+1,0:nx+1) :: hzero real, intent(inout), dimension(0:ny+1,0:nx+1) :: eta real, intent(out), dimension(0:ny+1,0:nx+1) :: etan real, intent(inout), dimension(0:ny+1,0:nx+1) :: h integer, intent(out), dimension(0:ny+1,0:nx+1) :: wet real, intent(out), dimension(0:ny+1,0:nx+1) :: u real, intent(out), dimension(0:ny+1,0:nx+1) :: un real, intent(out), dimension(0:ny+1,0:nx+1) :: v real, intent(out), dimension(0:ny+1,0:nx+1) :: vn","tags":"","loc":"module/module_init.html","title":"module_init – Refactored Shallow Water Simulator"},{"text":"Uses module_update sub program~~wave2d~~UsesGraph program~wave2d wave2d module~module_update module_update program~wave2d->module~module_update module~sub sub program~wave2d->module~sub module~module_dyn module_dyn module~sub->module~module_dyn module~module_shapiro module_shapiro module~sub->module~module_shapiro module~module_init module_init module~sub->module~module_init Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. * * * * * * !\n 2d shallow-water model ! !\n including: !\n - horizontal pressure-gradient force !\n - shapiro filter !\n - flooding algorithm ! !\n author: j. kaempf, 2008 ! * * * * * ! * *\ndebug Calls program~~wave2d~~CallsGraph program~wave2d wave2d proc~update update program~wave2d->proc~update interface~dyn dyn program~wave2d->interface~dyn interface~shapiro shapiro program~wave2d->interface~shapiro interface~init init program~wave2d->interface~init proc~dyn dyn interface~dyn->proc~dyn proc~shapiro shapiro interface~shapiro->proc~shapiro proc~init init interface~init->proc~init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables c dt dtmax dx dy eps eta etan g h hmax hmin hzero j k lambda n nout ntot nx ny time u un v vn wet Source Code wave2d Variables Type Attributes Name Initial real :: c real :: dt real :: dtmax real :: dx real :: dy real :: eps real, dimension(0:ny+1,0:nx+1) :: eta real, dimension(0:ny+1,0:nx+1) :: etan real :: g real, dimension(0:ny+1,0:nx+1) :: h real :: hmax real :: hmin real, dimension(0:ny+1,0:nx+1) :: hzero integer :: j integer :: k real :: lambda integer :: n integer :: nout integer :: ntot integer, parameter :: nx = 500 integer, parameter :: ny = 500 real :: time real, dimension(0:ny+1,0:nx+1) :: u real, dimension(0:ny+1,0:nx+1) :: un real, dimension(0:ny+1,0:nx+1) :: v real, dimension(0:ny+1,0:nx+1) :: vn integer, dimension(0:ny+1,0:nx+1) :: wet Source Code program wave2d use module_update !*****************************************! !* 2d shallow-water model                *! !*                                       *! !* including:                            *! !* - horizontal pressure-gradient force  *! !* - shapiro filter                      *! !* - flooding algorithm                  *! !*                                       *! !* author: j. kaempf, 2008               *! !*****************************************! use sub ! local parameters integer , parameter :: nx = 500 integer , parameter :: ny = 500 real :: dt real :: dx real :: dy real :: eps real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: eta real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: etan real :: g real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: h real :: hmin real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: hzero integer :: j integer :: k real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: u real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: un real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: v real , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: vn integer , dimension ( 0 : ny + 1 , 0 : nx + 1 ) :: wet real :: hmax real :: time real :: dtmax real :: c real :: lambda integer :: n integer :: ntot integer :: nout ! set local parameters ! runtime parameters ntot = 10000 ! set epsilon for Shapiro filter eps = 0.05 call init ( hmin , dx , dy , dt , g , j , k , hzero , eta , etan , h , wet , u , un , v , vn ) !********** !debug open ( 90 , file = 'debug.dat' , form = 'formatted' ) ! output of initial eta distribution open ( 10 , file = 'eta0.dat' , form = 'formatted' ) do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) end do close ( 10 ) ! output of initial layer thickness distribution open ( 10 , file = 'h0.dat' , form = 'formatted' ) do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( hzero ( j , k ), k = 0 , nx + 1 ) end do close ( 10 ) ! determine maximum water depth hmax = 0. do j = 1 , ny do k = 1 , nx hmax = max ( hmax , h ( j , k )) end do end do ! maximum phase speed c = sqrt ( 2 * g * hmax ) ! write ( 6 , * ) \"c = \" , c ! determine stability parameter lambda = dt * sqrt ( g * hmax ) / min ( dx , dy ) write ( 6 , * ) \"lambda = \" , lambda if ( lambda > 1 ) then write ( 6 , * ) \"This will not work. Do you know why?\" stop end if ! open files for output open ( 10 , file = 'eta.dat' , form = 'formatted' ) open ( 20 , file = 'h.dat' , form = 'formatted' ) open ( 30 , file = 'u.dat' , form = 'formatted' ) open ( 40 , file = 'v.dat' , form = 'formatted' ) do j = 26 , 26 do k = 26 , 26 eta ( j , k ) = 1.0 end do end do !--------------------------- ! simulation loop !--------------------------- do n = 1 , ntot time = real ( n ) * dt ! call predictor call dyn ( j , k , eta , dt , dx , g , dy , un , u , wet , v , vn , h , etan ) ! updating including Shapiro filter call shapiro ( j , k , wet , etan , eps , eta ) call update ( dt , dx , dy , eps , eta , etan , g , h , hmin , hzero , j , k , u , un , v , vn , wet ) end do !write results only once at the end.... do j = 0 , ny + 1 write ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) write ( 20 , '(101F12.6)' )( h ( j , k ) , k = 0 , nx + 1 ) write ( 30 , '(101F12.6)' )( u ( j , k ) , k = 0 , nx + 1 ) write ( 40 , '(101F12.6)' )( v ( j , k ) , k = 0 , nx + 1 ) end do write ( 6 , * ) \"Data output at time = \" , time / 6 0.0 , \" min\" end program wave2d","tags":"","loc":"program/wave2d.html","title":"wave2d – Refactored Shallow Water Simulator"}]}