var tipuesearch = {"pages":[{"text":"Shallow Water Simulator Brief description This code is provided for demonstrating the capabilities of the Fortran refactoring tool RefactorF4Acc. Compilers This archive has been tested with the GNU Fortran compiler versions 7 and 8. Developer Info J. Kaempf","tags":"home","loc":"index.html","title":" Shallow Water Simulator "},{"text":"This file depends on sourcefile~~main.f95~~EfferentGraph sourcefile~main.f95 main.f95 sourcefile~sub.f95 sub.f95 sourcefile~main.f95->sourcefile~sub.f95 sourcefile~param.f95 param.f95 sourcefile~main.f95->sourcefile~param.f95 sourcefile~sub.f95->sourcefile~param.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Programs wave2D Source Code main.f95 Source Code PROGRAM wave2D !*****************************************! !* 2d shallow-Water model                *! !*                                       *! !* including:                            *! !* - horizontal pressure-gradient force  *! !* - Shapiro filter                      *! !* - flooding algorithm                  *! !*                                       *! !* Author: J. Kaempf, 2008               *! !*****************************************! USE param USE sub ! local parameters REAL :: hmax , time , dtmax REAL :: c , lambda INTEGER :: n , ntot , nout ! set local parameters ! runtime parameters ntot = 10000 ! set epsilon for Shapiro filter eps = 0.05 CALL INIT ! initialisation !********** !debug OPEN ( 90 , file = 'debug.dat' , form = 'formatted' ) ! output of initial eta distribution OPEN ( 10 , file = 'eta0.dat' , form = 'formatted' ) DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) END DO CLOSE ( 10 ) ! output of initial layer thickness distribution OPEN ( 10 , file = 'h0.dat' , form = 'formatted' ) DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( hzero ( j , k ), k = 0 , nx + 1 ) END DO CLOSE ( 10 ) ! determine maximum water depth hmax = 0. DO j = 1 , ny DO k = 1 , nx hmax = MAX ( hmax , h ( j , k )) END DO END DO ! maximum phase speed c = SQRT ( 2 * g * hmax ) ! WRITE ( 6 , * ) \"c = \" , c ! determine stability parameter lambda = dt * SQRT ( g * hmax ) / MIN ( dx , dy ) WRITE ( 6 , * ) \"lambda = \" , lambda IF ( lambda > 1 ) THEN WRITE ( 6 , * ) \"This will not work. Do you know why?\" STOP END IF ! open files for output OPEN ( 10 , file = 'eta.dat' , form = 'formatted' ) OPEN ( 20 , file = 'h.dat' , form = 'formatted' ) OPEN ( 30 , file = 'u.dat' , form = 'formatted' ) OPEN ( 40 , file = 'v.dat' , form = 'formatted' ) DO j = 26 , 26 DO k = 26 , 26 eta ( j , k ) = 1.0 END DO END DO !--------------------------- ! simulation loop !--------------------------- DO n = 1 , ntot time = REAL ( n ) * dt ! call predictor CALL dyn ! updating including Shapiro filter CALL shapiro !$ACC Subroutine update DO j = 0 , ny + 1 DO k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) wet ( j , k ) = 1 IF ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = un ( j , k ) v ( j , k ) = vn ( j , k ) END DO END DO !$ACC End Subroutine update END DO ! end of iteration loop !Write results only once at the end.... DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) WRITE ( 20 , '(101F12.6)' )( h ( j , k ) , k = 0 , nx + 1 ) WRITE ( 30 , '(101F12.6)' )( u ( j , k ) , k = 0 , nx + 1 ) WRITE ( 40 , '(101F12.6)' )( v ( j , k ) , k = 0 , nx + 1 ) END DO WRITE ( 6 , * ) \"Data output at time = \" , time / 6 0.0 , \" min\" END PROGRAM wave2D","tags":"","loc":"sourcefile/main.f95.html","title":"main.f95 – Shallow Water Simulator"},{"text":"Files dependent on this one sourcefile~~param.f95~~AfferentGraph sourcefile~param.f95 param.f95 sourcefile~sub.f95 sub.f95 sourcefile~sub.f95->sourcefile~param.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~param.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules param Source Code param.f95 Source Code MODULE param INTEGER ( 4 ), PARAMETER :: nx = 500 INTEGER ( 4 ), PARAMETER :: ny = 500 REAL :: hzero ( 0 : ny + 1 , 0 : nx + 1 ), h ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: eta ( 0 : ny + 1 , 0 : nx + 1 ), etan ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: u ( 0 : ny + 1 , 0 : nx + 1 ), un ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: v ( 0 : ny + 1 , 0 : nx + 1 ), vn ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: dt , dx , dy , g REAL :: eps ! parameter for Shapiro filter INTEGER :: j , k INTEGER :: wet ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: hmin END MODULE param","tags":"","loc":"sourcefile/param.f95.html","title":"param.f95 – Shallow Water Simulator"},{"text":"This file depends on sourcefile~~sub.f95~~EfferentGraph sourcefile~sub.f95 sub.f95 sourcefile~param.f95 param.f95 sourcefile~sub.f95->sourcefile~param.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Files dependent on this one sourcefile~~sub.f95~~AfferentGraph sourcefile~sub.f95 sub.f95 sourcefile~main.f95 main.f95 sourcefile~main.f95->sourcefile~sub.f95 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Contents Modules sub Source Code sub.f95 Source Code MODULE sub USE param CONTAINS !======================= SUBROUTINE init hmin = 0.05 ! grid parameters dx = 1 0.0 dy = 1 0.0 dt = 0.1 ! physical parameters g = 9.81 ! initial conditions DO j = 0 , ny + 1 DO k = 0 , nx + 1 hzero ( j , k ) = 1 0.0 END DO END DO ! land boundaries with 10 m elevation DO k = 0 , nx + 1 hzero ( 0 , k ) = - 1 0.0 ! hzero(1,k) = -0.0 hzero ( ny + 1 , k ) = - 1 0.0 ! hzero(ny,k) = -0.0 END DO DO j = 0 , ny + 1 hzero ( j , 0 ) = - 1 0.0 hzero ( j , nx + 1 ) = - 1 0.0 END DO DO j = 0 , ny + 1 DO k = 0 , nx + 1 eta ( j , k ) = - MIN ( 0.0 , hzero ( j , k )) etan ( j , k ) = eta ( j , k ) END DO END DO !XXXXXXXXXXXXXXXXXXX DO j = 0 , ny + 1 DO k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) ! wet = 1 defines \"wet\" grid cells ! wet = 0 defines \"dry\" grid cells wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = 0. un ( j , k ) = 0. v ( j , k ) = 0. vn ( j , k ) = 0. END DO END DO END SUBROUTINE init !================ SUBROUTINE dyn ! local parameters REAL :: du ( 0 : ny + 1 , 0 : nx + 1 ), dv ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: uu , vv , duu , dvv REAL :: hue , huw , hwp , hwn , hen , hep REAL :: hvn , hvs , hsp , hsn , hnn , hnp DO j = 1 , ny DO k = 1 , nx du ( j , k ) = - dt * g * ( eta ( j , k + 1 ) - eta ( j , k )) / dx dv ( j , k ) = - dt * g * ( eta ( j + 1 , k ) - eta ( j , k )) / dy END DO END DO DO j = 1 , ny DO k = 1 , nx ! prediction for u un ( j , k ) = 0.0 uu = u ( j , k ) duu = du ( j , k ) IF ( wet ( j , k ) == 1 ) THEN IF (( wet ( j , k + 1 ) == 1 ). or .( duu > 0.0 )) un ( j , k ) = uu + duu ELSE IF (( wet ( j , k + 1 ) == 1 ). and .( duu < 0.0 )) un ( j , k ) = uu + duu END IF ! prediction for v vv = v ( j , k ) dvv = dv ( j , k ) vn ( j , k ) = 0.0 IF ( wet ( j , k ) == 1 ) THEN IF (( wet ( j + 1 , k ) == 1 ). or .( dvv > 0.0 )) vn ( j , k ) = vv + dvv ELSE IF (( wet ( j + 1 , k ) == 1 ). and .( dvv < 0.0 )) vn ( j , k ) = vv + dvv END IF END DO END DO ! sea level predictor DO j = 1 , ny DO k = 1 , nx hep = 0.5 * ( un ( j , k ) + abs ( un ( j , k ))) * h ( j , k ) hen = 0.5 * ( un ( j , k ) - abs ( un ( j , k ))) * h ( j , k + 1 ) hue = hep + hen hwp = 0.5 * ( un ( j , k - 1 ) + abs ( un ( j , k - 1 ))) * h ( j , k - 1 ) hwn = 0.5 * ( un ( j , k - 1 ) - abs ( un ( j , k - 1 ))) * h ( j , k ) huw = hwp + hwn hnp = 0.5 * ( vn ( j , k ) + abs ( vn ( j , k ))) * h ( j , k ) hnn = 0.5 * ( vn ( j , k ) - abs ( vn ( j , k ))) * h ( j + 1 , k ) hvn = hnp + hnn hsp = 0.5 * ( vn ( j - 1 , k ) + abs ( vn ( j - 1 , k ))) * h ( j - 1 , k ) hsn = 0.5 * ( vn ( j - 1 , k ) - abs ( vn ( j - 1 , k ))) * h ( j , k ) hvs = hsp + hsn etan ( j , k ) = eta ( j , k ) - dt * ( hue - huw ) / dx - dt * ( hvn - hvs ) / dy END DO END DO END SUBROUTINE dyn !====================== SUBROUTINE shapiro !local parameters REAL :: term1 , term2 , term3 ! 1-order Shapiro filter DO j = 1 , ny DO k = 1 , nx IF ( wet ( j , k ) == 1 ) THEN term1 = ( 1.0 - 0.25 * eps * ( wet ( j , k + 1 ) + wet ( j , k - 1 ) + wet ( j + 1 , k ) + wet ( j - 1 , k ))) * etan ( j , k ) term2 = 0.25 * eps * ( wet ( j , k + 1 ) * etan ( j , k + 1 ) + wet ( j , k - 1 ) * etan ( j , k - 1 )) term3 = 0.25 * eps * ( wet ( j + 1 , k ) * etan ( j + 1 , k ) + wet ( j - 1 , k ) * etan ( j - 1 , k )) eta ( j , k ) = term1 + term2 + term3 ELSE eta ( j , k ) = etan ( j , k ) END IF END DO END DO END SUBROUTINE shapiro END MODULE sub","tags":"","loc":"sourcefile/sub.f95.html","title":"sub.f95 – Shallow Water Simulator"},{"text":"public subroutine dyn() Arguments None Called by proc~~dyn~~CalledByGraph proc~dyn dyn program~wave2d wave2D program~wave2d->proc~dyn Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code dyn Source Code SUBROUTINE dyn ! local parameters REAL :: du ( 0 : ny + 1 , 0 : nx + 1 ), dv ( 0 : ny + 1 , 0 : nx + 1 ) REAL :: uu , vv , duu , dvv REAL :: hue , huw , hwp , hwn , hen , hep REAL :: hvn , hvs , hsp , hsn , hnn , hnp DO j = 1 , ny DO k = 1 , nx du ( j , k ) = - dt * g * ( eta ( j , k + 1 ) - eta ( j , k )) / dx dv ( j , k ) = - dt * g * ( eta ( j + 1 , k ) - eta ( j , k )) / dy END DO END DO DO j = 1 , ny DO k = 1 , nx ! prediction for u un ( j , k ) = 0.0 uu = u ( j , k ) duu = du ( j , k ) IF ( wet ( j , k ) == 1 ) THEN IF (( wet ( j , k + 1 ) == 1 ). or .( duu > 0.0 )) un ( j , k ) = uu + duu ELSE IF (( wet ( j , k + 1 ) == 1 ). and .( duu < 0.0 )) un ( j , k ) = uu + duu END IF ! prediction for v vv = v ( j , k ) dvv = dv ( j , k ) vn ( j , k ) = 0.0 IF ( wet ( j , k ) == 1 ) THEN IF (( wet ( j + 1 , k ) == 1 ). or .( dvv > 0.0 )) vn ( j , k ) = vv + dvv ELSE IF (( wet ( j + 1 , k ) == 1 ). and .( dvv < 0.0 )) vn ( j , k ) = vv + dvv END IF END DO END DO ! sea level predictor DO j = 1 , ny DO k = 1 , nx hep = 0.5 * ( un ( j , k ) + abs ( un ( j , k ))) * h ( j , k ) hen = 0.5 * ( un ( j , k ) - abs ( un ( j , k ))) * h ( j , k + 1 ) hue = hep + hen hwp = 0.5 * ( un ( j , k - 1 ) + abs ( un ( j , k - 1 ))) * h ( j , k - 1 ) hwn = 0.5 * ( un ( j , k - 1 ) - abs ( un ( j , k - 1 ))) * h ( j , k ) huw = hwp + hwn hnp = 0.5 * ( vn ( j , k ) + abs ( vn ( j , k ))) * h ( j , k ) hnn = 0.5 * ( vn ( j , k ) - abs ( vn ( j , k ))) * h ( j + 1 , k ) hvn = hnp + hnn hsp = 0.5 * ( vn ( j - 1 , k ) + abs ( vn ( j - 1 , k ))) * h ( j - 1 , k ) hsn = 0.5 * ( vn ( j - 1 , k ) - abs ( vn ( j - 1 , k ))) * h ( j , k ) hvs = hsp + hsn etan ( j , k ) = eta ( j , k ) - dt * ( hue - huw ) / dx - dt * ( hvn - hvs ) / dy END DO END DO END SUBROUTINE dyn","tags":"","loc":"proc/dyn.html","title":"dyn – Shallow Water Simulator"},{"text":"public subroutine init() Arguments None Called by proc~~init~~CalledByGraph proc~init init program~wave2d wave2D program~wave2d->proc~init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code init Source Code SUBROUTINE init hmin = 0.05 ! grid parameters dx = 1 0.0 dy = 1 0.0 dt = 0.1 ! physical parameters g = 9.81 ! initial conditions DO j = 0 , ny + 1 DO k = 0 , nx + 1 hzero ( j , k ) = 1 0.0 END DO END DO ! land boundaries with 10 m elevation DO k = 0 , nx + 1 hzero ( 0 , k ) = - 1 0.0 ! hzero(1,k) = -0.0 hzero ( ny + 1 , k ) = - 1 0.0 ! hzero(ny,k) = -0.0 END DO DO j = 0 , ny + 1 hzero ( j , 0 ) = - 1 0.0 hzero ( j , nx + 1 ) = - 1 0.0 END DO DO j = 0 , ny + 1 DO k = 0 , nx + 1 eta ( j , k ) = - MIN ( 0.0 , hzero ( j , k )) etan ( j , k ) = eta ( j , k ) END DO END DO !XXXXXXXXXXXXXXXXXXX DO j = 0 , ny + 1 DO k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) ! wet = 1 defines \"wet\" grid cells ! wet = 0 defines \"dry\" grid cells wet ( j , k ) = 1 if ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = 0. un ( j , k ) = 0. v ( j , k ) = 0. vn ( j , k ) = 0. END DO END DO END SUBROUTINE init","tags":"","loc":"proc/init.html","title":"init – Shallow Water Simulator"},{"text":"public subroutine shapiro() Arguments None Called by proc~~shapiro~~CalledByGraph proc~shapiro shapiro program~wave2d wave2D program~wave2d->proc~shapiro Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Source Code shapiro Source Code SUBROUTINE shapiro !local parameters REAL :: term1 , term2 , term3 ! 1-order Shapiro filter DO j = 1 , ny DO k = 1 , nx IF ( wet ( j , k ) == 1 ) THEN term1 = ( 1.0 - 0.25 * eps * ( wet ( j , k + 1 ) + wet ( j , k - 1 ) + wet ( j + 1 , k ) + wet ( j - 1 , k ))) * etan ( j , k ) term2 = 0.25 * eps * ( wet ( j , k + 1 ) * etan ( j , k + 1 ) + wet ( j , k - 1 ) * etan ( j , k - 1 )) term3 = 0.25 * eps * ( wet ( j + 1 , k ) * etan ( j + 1 , k ) + wet ( j - 1 , k ) * etan ( j - 1 , k )) eta ( j , k ) = term1 + term2 + term3 ELSE eta ( j , k ) = etan ( j , k ) END IF END DO END DO END SUBROUTINE shapiro","tags":"","loc":"proc/shapiro.html","title":"shapiro – Shallow Water Simulator"},{"text":"Used by module~~param~~UsedByGraph module~param param module~sub sub module~sub->module~param program~wave2d wave2D program~wave2d->module~param program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Variables dt dx dy eps eta etan g h hmin hzero j k nx ny u un v vn wet Variables Type Visibility Attributes Name Initial real, public :: dt real, public :: dx real, public :: dy real, public :: eps real, public :: eta (0:ny+1,0:nx+1) real, public :: etan (0:ny+1,0:nx+1) real, public :: g real, public :: h (0:ny+1,0:nx+1) real, public :: hmin real, public :: hzero (0:ny+1,0:nx+1) integer, public :: j integer, public :: k integer(kind=4), public, parameter :: nx = 500 integer(kind=4), public, parameter :: ny = 500 real, public :: u (0:ny+1,0:nx+1) real, public :: un (0:ny+1,0:nx+1) real, public :: v (0:ny+1,0:nx+1) real, public :: vn (0:ny+1,0:nx+1) integer, public :: wet (0:ny+1,0:nx+1)","tags":"","loc":"module/param.html","title":"param – Shallow Water Simulator"},{"text":"Uses param module~~sub~~UsesGraph module~sub sub module~param param module~sub->module~param Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Used by module~~sub~~UsedByGraph module~sub sub program~wave2d wave2D program~wave2d->module~sub Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Contents Subroutines dyn init shapiro Subroutines public subroutine dyn () Arguments None public subroutine init () Arguments None public subroutine shapiro () Arguments None","tags":"","loc":"module/sub.html","title":"sub – Shallow Water Simulator"},{"text":"Uses param sub program~~wave2d~~UsesGraph program~wave2d wave2D module~sub sub program~wave2d->module~sub module~param param program~wave2d->module~param module~sub->module~param Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. * * * * * * !\n 2d shallow-Water model ! !\n including: !\n - horizontal pressure-gradient force !\n - Shapiro filter !\n - flooding algorithm ! !\n Author: J. Kaempf, 2008 ! * * * * * ***! debug Calls program~~wave2d~~CallsGraph program~wave2d wave2D proc~shapiro shapiro program~wave2d->proc~shapiro proc~init init program~wave2d->proc~init proc~dyn dyn program~wave2d->proc~dyn Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Contents Variables c dtmax hmax lambda n nout ntot time Source Code wave2D Variables Type Attributes Name Initial real :: c real :: dtmax real :: hmax real :: lambda integer :: n integer :: nout integer :: ntot real :: time Source Code PROGRAM wave2D !*****************************************! !* 2d shallow-Water model                *! !*                                       *! !* including:                            *! !* - horizontal pressure-gradient force  *! !* - Shapiro filter                      *! !* - flooding algorithm                  *! !*                                       *! !* Author: J. Kaempf, 2008               *! !*****************************************! USE param USE sub ! local parameters REAL :: hmax , time , dtmax REAL :: c , lambda INTEGER :: n , ntot , nout ! set local parameters ! runtime parameters ntot = 10000 ! set epsilon for Shapiro filter eps = 0.05 CALL INIT ! initialisation !********** !debug OPEN ( 90 , file = 'debug.dat' , form = 'formatted' ) ! output of initial eta distribution OPEN ( 10 , file = 'eta0.dat' , form = 'formatted' ) DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) END DO CLOSE ( 10 ) ! output of initial layer thickness distribution OPEN ( 10 , file = 'h0.dat' , form = 'formatted' ) DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( hzero ( j , k ), k = 0 , nx + 1 ) END DO CLOSE ( 10 ) ! determine maximum water depth hmax = 0. DO j = 1 , ny DO k = 1 , nx hmax = MAX ( hmax , h ( j , k )) END DO END DO ! maximum phase speed c = SQRT ( 2 * g * hmax ) ! WRITE ( 6 , * ) \"c = \" , c ! determine stability parameter lambda = dt * SQRT ( g * hmax ) / MIN ( dx , dy ) WRITE ( 6 , * ) \"lambda = \" , lambda IF ( lambda > 1 ) THEN WRITE ( 6 , * ) \"This will not work. Do you know why?\" STOP END IF ! open files for output OPEN ( 10 , file = 'eta.dat' , form = 'formatted' ) OPEN ( 20 , file = 'h.dat' , form = 'formatted' ) OPEN ( 30 , file = 'u.dat' , form = 'formatted' ) OPEN ( 40 , file = 'v.dat' , form = 'formatted' ) DO j = 26 , 26 DO k = 26 , 26 eta ( j , k ) = 1.0 END DO END DO !--------------------------- ! simulation loop !--------------------------- DO n = 1 , ntot time = REAL ( n ) * dt ! call predictor CALL dyn ! updating including Shapiro filter CALL shapiro !$ACC Subroutine update DO j = 0 , ny + 1 DO k = 0 , nx + 1 h ( j , k ) = hzero ( j , k ) + eta ( j , k ) wet ( j , k ) = 1 IF ( h ( j , k ) < hmin ) wet ( j , k ) = 0 u ( j , k ) = un ( j , k ) v ( j , k ) = vn ( j , k ) END DO END DO !$ACC End Subroutine update END DO ! end of iteration loop !Write results only once at the end.... DO j = 0 , ny + 1 WRITE ( 10 , '(101F12.6)' )( eta ( j , k ), k = 0 , nx + 1 ) WRITE ( 20 , '(101F12.6)' )( h ( j , k ) , k = 0 , nx + 1 ) WRITE ( 30 , '(101F12.6)' )( u ( j , k ) , k = 0 , nx + 1 ) WRITE ( 40 , '(101F12.6)' )( v ( j , k ) , k = 0 , nx + 1 ) END DO WRITE ( 6 , * ) \"Data output at time = \" , time / 6 0.0 , \" min\" END PROGRAM wave2D","tags":"","loc":"program/wave2d.html","title":"wave2D – Shallow Water Simulator"}]}